addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircles(lng = ~lon,lat = ~lat)
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircles(lng = ~lon,lat = ~lat)
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCirclesMarkers(lng = ~lon,lat = ~lat)
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat)
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircles(lng = ~lon,lat = ~lat)
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 3)
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 2)
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1)
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "CartoDB")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, color = "red")
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, color = "red")
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, color = "orange")
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1)
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0(BOROUGH_DESC, "<br/>", address, "<br/>", ZIP_CODE))
?str_detect
library(leaflet)
library(stringr)
#str_detect(names(providers), "CartoDB"
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0(BOROUGH_DESC, "<br/>", address, "<br/>", ZIP_CODE))
library(leaflet)
library(stringr)
#str_detect(names(providers), "CartoDB"
highest_alarm %>%
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0(INCIDENT_DATE_TIME, "<br/>", address, "<br/>", FIRE_SPREAD_DESC))
library(leaflet)
library(stringr)
#str_detect(names(providers), "CartoDB"
highest_alarm %>%
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0(INCIDENT_DATE_TIME, "<br/>", address, "<br/>", FIRE_SPREAD_DESC))
library(leaflet)
library(stringr)
#str_detect(names(providers), "CartoDB"
highest_alarm %>%
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0(INCIDENT_DATE_TIME, "<br/>", address, "<br/>", FIRE_SPREAD_DESC))
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0(BOROUGH_DESC, "<br/>", address, "<br/>", ZIP_CODE))
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0(BOROUGH_DESC, "<br/>", address, "<br/>", FIRE_SPREAD_DESC))
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0(INCIDENT_DATE_TIME, "<br/>", address, "<br/>", FIRE_SPREAD_DESC))
# subset to the highest alarm
unique(fire_building$HIGHEST_LEVEL_DESC)
highest_alarm <- fire_building %>%
filter(HIGHEST_LEVEL_DESC=="7 - Signal 7-5"| HIGHEST_LEVEL_DESC=="75 - All Hands Working")
unique(highest_alarm$HIGHEST_LEVEL_DESC)
head(highest_alarm)
View(firehouses)
library(leaflet)
leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0(INCIDENT_DATE_TIME, "<br/>", address, "<br/>", FIRE_SPREAD_DESC))
library(leaflet)
highest_alarm_map <- leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0(INCIDENT_DATE_TIME, "<br/>", address, "<br/>", FIRE_SPREAD_DESC))
highest_alarm_map
library(htmlwidgets)
library(knitr)
opts_chunk$set(fig.path="figures/",
cache.path="cache/",
cache=FALSE,
echo=TRUE,
message=FALSE,
warning=FALSE)
library(leaflet)
library(stringr)
highest_alarm_map <- leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0("Date: ",str_extract(INCIDENT_DATE_TIME, pattern = "[0-9]+/[0-9]+/[0-9]+"), "<br/>", "Address: ", address, "<br/>", "Spread: ", str_sub(FIRE_SPREAD_DESC, 5,-1)))
library(ggmap)
library(tidyverse)
library(dplyr)
# Open "building_fires" file
fire_building <- read_csv("data/building_fires.csv")
firehouses <- read_csv("data/FDNY_Firehouse_Listing.csv") %>%
dplyr::filter(!is.na(Latitude))
# subset to the highest alarm
unique(fire_building$HIGHEST_LEVEL_DESC)
highest_alarm <- fire_building %>%
filter(HIGHEST_LEVEL_DESC=="7 - Signal 7-5"| HIGHEST_LEVEL_DESC=="75 - All Hands Working")
unique(highest_alarm$HIGHEST_LEVEL_DESC)
head(highest_alarm)
library(leaflet)
library(stringr)
highest_alarm_map <- leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0("Date: ",str_extract(INCIDENT_DATE_TIME, pattern = "[0-9]+/[0-9]+/[0-9]+"), "<br/>", "Address: ", address, "<br/>", "Spread: ", str_sub(FIRE_SPREAD_DESC, 5,-1)))
highest_alarm_map
library(htmlwidgets)
saveWidget(highest_alarm_map, file="figures/highest_alarm_map.html")
library(leaflet)
library(stringr)
highest_alarm_map <- leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0("Date: ",str_extract(INCIDENT_DATE_TIME, pattern = "[0-9]+/[0-9]+/[0-9]+"), "<br/>", "Address: ", address, "<br/>", "Spread: ", str_sub(FIRE_SPREAD_DESC, 5,-1)))
highest_alarm_map
library(htmlwidgets)
saveWidget(highest_alarm_map, file="figures/highest_alarm_map.html")
library(leaflet)
library(stringr)
highest_alarm_map <- leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0("Date: ",str_extract(INCIDENT_DATE_TIME, pattern = "[0-9]+/[0-9]+/[0-9]+"), "<br/>", "Address: ", address, "<br/>", "Spread: ", str_sub(FIRE_SPREAD_DESC, 5,-1)))
highest_alarm_map
library(htmlwidgets)
saveWidget(highest_alarm_map, file="/figures/highest_alarm_map.html")
library(leaflet)
library(stringr)
highest_alarm_map <- leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "Esri")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, popup = ~paste0("Date: ",str_extract(INCIDENT_DATE_TIME, pattern = "[0-9]+/[0-9]+/[0-9]+"), "<br/>", "Address: ", address, "<br/>", "Spread: ", str_sub(FIRE_SPREAD_DESC, 5,-1)))
highest_alarm_map
library(htmlwidgets)
saveWidget(highest_alarm_map, file="highest_alarm_map.html")
unique(highest_alarm$PROPERTY_USE_DESC)
highest_alarm %>%
group_by(PROPERTY_USE_DESC) %>%
count()%>%
arrange(desc (n))
library(stringr)
highest_alarm['class']=list(str_sub(highest_alarm$PROPERTY_USE_DESC,1,1))
highest_alarm$class[highest_alarm$class == "1"] <- "Assembly"
highest_alarm$class[highest_alarm$class == "2"] <- "Educational"
highest_alarm$class[highest_alarm$class == "3"] <- "Healthcare, Detention and Correction"
highest_alarm$class[highest_alarm$class == "4"] <- "Residential"
highest_alarm$class[highest_alarm$class == "5"] <- "Mercantile and Business"
highest_alarm$class[highest_alarm$class == "6"] <- "Energy Production Plant"
highest_alarm$class[highest_alarm$class == "7"] <- "Manufacturing and Processing"
highest_alarm$class[highest_alarm$class == "8"] <- "Storage"
highest_alarm$class[highest_alarm$class %in% c("9","U","N","0")] <- "Other Property"
highest_alarm$class <- factor(highest_alarm$class, levels= c("Assembly","Educational","Healthcare, Detention and Correction", "Residential", "Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"))
highest_alarm %>%
group_by(class) %>%
count() %>%
arrange(desc(n))
library(RColorBrewer)
pal <- colorFactor(palette = "Set3", levels = c("Assembly","Educational","Healthcare, Detention and Correction", "Residential", "Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"))
property_map <- leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "CartoDB")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, color = ~pal(class), popup = ~paste0("<b>","Property Type: ", class,"</b>","<br/>","Date: ",str_extract(INCIDENT_DATE_TIME, pattern = "[0-9]+/[0-9]+/[0-9]+"), "<br/>", "Address: ", address, "<br/>", "Spread: ", str_sub(FIRE_SPREAD_DESC, 5,-1)))%>%
addLegend(pal = pal, values = c("Assembly","Educational","Healthcare, Detention and Correction", "Residential", "Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"), opacity = 0.8, title = "Property Affected",position = "topleft")
property_map
saveWidget(property_map, file="property_map.html")
cluster_property_map <- leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "CartoDB")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = 1, color = ~pal(class), clusterOptions = markerClusterOptions(), popup = ~paste0("<b>","Property Type: ", class,"</b>","<br/>","Date: ",str_extract(INCIDENT_DATE_TIME, pattern = "[0-9]+/[0-9]+/[0-9]+"), "<br/>", "Address: ", address, "<br/>", "Spread: ", str_sub(FIRE_SPREAD_DESC, 5,-1)))%>%
addLegend(pal = pal, values = c("Assembly","Educational","Healthcare, Detention and Correction", "Residential", "Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"), opacity = 0.8, title = "Property Affected",position = "topleft")
cluster_property_map
saveWidget(cluster_property_map, file="cluster_property_map.html")
#highest_alarm$TOTAL_INCIDENT_DURATION)
summary(highest_alarm$TOTAL_INCIDENT_DURATION)
incidents_firehouse_map <-leaflet(highest_alarm, options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "CartoDB")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 ) %>%
addCircleMarkers(lng = ~lon,lat = ~lat, radius = ~TOTAL_INCIDENT_DURATION/5000 , color = ~pal(class), popup = ~paste0("<b>","Property Type: ", class,"</b>","<br/>","Date: ",str_extract(INCIDENT_DATE_TIME, pattern = "[0-9]+/[0-9]+/[0-9]+"), "<br/>", "Address: ", address, "<br/>", "Spread: ", str_sub(FIRE_SPREAD_DESC, 5,-1)), group = "Incidents")%>%
addLegend(pal = pal, values = c("Assembly","Educational","Healthcare, Detention and Correction", "Residential", "Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"), opacity = 0.8, title = "Property Affected",position = "topleft")%>%
addMarkers(data = firehouses, lng = ~Longitude, lat = ~Latitude, group = "Firehouses")%>%
addLayersControl(overlayGroups = c("Incidents", "Firehouses"))
incidents_firehouse_map
saveWidget(incidents_firehouse_map, file="incidents_firehouse_map.html")
library(sp)
library(sf)
library(raster)
library(rgeos)
# transform firehouse into sf object
firehouse_sf <- st_as_sf(firehouses, coords = c("Longitude", "Latitude"), crs = 4326)
# build an empty list to store the nearest distance
nearest <-list()
# iterate the fire_building and transform them into sp objects
# use st_distance to calculate the distances and find the nearest firehouse
for(i in 1:nrow(fire_building)){
point_sf <- st_as_sf(fire_building[i,], coords = c("lon", "lat"), crs = 4326)
nearest[i] <- min(st_distance(point_sf, firehouse_sf))
}
length(nearest)
any(is.na(nearest))
# create a new column in fire_building about the nearest distance from firehouse
fire_building['distance'] <- unlist(nearest)
distance_and_time <- fire_building %>%
dplyr::select(INCIDENT_DATE_TIME, ARRIVAL_DATE_TIME, PROPERTY_USE_DESC,HIGHEST_LEVEL_DESC,BOROUGH_DESC, lon, lat, distance)
head(distance_and_time)
incident_time <- as.POSIXct(strptime(distance_and_time[['INCIDENT_DATE_TIME']], format = "%m/%d/%Y %H:%M:%S %p"))
arrival_time <- as.POSIXct(strptime(distance_and_time[['ARRIVAL_DATE_TIME']], format = "%m/%d/%Y %H:%M:%S %p"))
waiting_time <- arrival_time-incident_time
distance_and_time['waiting_time_secs'] <- as.numeric(waiting_time)
#There are some mistakes in original records like wrong AM/PM
#Transfrom those wrong records (negative numbers) by adding 12 hours back
for(i in 1:nrow(distance_and_time)){
if (!is.na(distance_and_time[i,'waiting_time_secs'])&distance_and_time[i,'waiting_time_secs'] < 0) {
distance_and_time[i,'waiting_time_secs'] <- distance_and_time[i,'waiting_time_secs']+12*60*60
}
}
head(distance_and_time)
summary(distance_and_time)
library(ggplot2)
library(ggthemes)
library(plotly)
df_plot <-distance_and_time %>%
filter(!is.na(waiting_time_secs))%>%
filter(distance < 5000) %>%
filter(waiting_time_secs < 5000)
p <-ggplot(df_plot, aes(x = distance, y = waiting_time_secs))+
geom_point(alpha = 0.5)+
labs(x = "Distance From The Nearest Firehouse (m)", y = "Waiting Time For The First Engine (secs)")+
theme_clean()
p
fire_levels <- distance_and_time%>%
filter(!is.na(HIGHEST_LEVEL_DESC))
fire_levels['level']=list(str_sub(fire_levels$HIGHEST_LEVEL_DESC,1,2))
fire_levels$level[fire_levels$level %in% c("7 ", "75")] <- "High Alarm"
fire_levels$level[fire_levels$level %in% c("5 ", "55", "4 ", "44", "3 ", "33")] <- "Medium Alarm"
fire_levels$level[fire_levels$level %in% c("2 ", "22", "11", "0 ")] <- "Low Alarm"
fire_levels$level[fire_levels$level %in% c("1 ")] <- "Undefined Alarm"
fire_levels$level <- factor(fire_levels$level, levels= c("Low Alarm","Medium Alarm","High Alarm","Undefined Alarm"))
fire_levels_plot <- fire_levels %>%
filter(!is.na(waiting_time_secs))%>%
filter(distance < 5000) %>%
filter(waiting_time_secs < 1000)
ggplot(fire_levels_plot, aes(x=waiting_time_secs, y=distance, color = level))+
geom_point(alpha=0.4)+
facet_grid(~ level)+
labs(x = "Waiting Time For The First Engine (secs)", y = "Distance From The Nearest Firehouse (m)")+
theme_bw()
response_time <- fire_levels
response_time['class']=list(str_sub(response_time$PROPERTY_USE_DESC,1,1))
response_time$class[response_time$class == "1"] <- "Assembly"
response_time$class[response_time$class == "2"] <- "Educational"
response_time$class[response_time$class == "3"] <- "Healthcare, Detention and Correction"
response_time$class[response_time$class == "4"] <- "Residential"
response_time$class[response_time$class == "5"] <- "Mercantile and Business"
response_time$class[response_time$class == "6"] <- "Energy Production Plant"
response_time$class[response_time$class == "7"] <- "Manufacturing and Processing"
response_time$class[response_time$class == "8"] <- "Storage"
response_time$class[response_time$class %in% c("9","U","N","0")] <- "Other Property"
response_time$class <- factor(response_time$class, levels= c("Assembly","Educational","Healthcare, Detention and Correction", "Residential", "Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"))
head(response_time)
low <- filter(response_time, level == "Low Alarm")
medium <- filter(response_time, level == "Medium Alarm")
high <- filter(response_time, level == "High Alarm")
pal_level <- colorFactor(palette = c("#f03b20", "#feb24c", "#ffeda0"),
levels = c("High Alarm","Medium Alarm","Low Alarm"))
alarm_map <- leaflet(options = leafletOptions(minZoom = 8, dragging = TRUE)) %>%
addProviderTiles("CartoDB.DarkMatter",options = providerTileOptions(attribution = ""))%>%
addCircleMarkers(data = low, lng = ~lon, lat = ~lat, radius = ~waiting_time_secs/5000, fillOpacity=0.3,
color = ~pal_level(level),  group = "Low Alarm", popup=~paste("Alarm Level: ",level,
"<br>Response Time: ", waiting_time_secs," seconds", "<br>Property Type: ", class)) %>%
addCircleMarkers(data = medium, lng = ~lon, lat = ~lat, radius = ~waiting_time_secs/5000, fillOpacity=0.3,
color = ~pal_level(level),  group = "Medium Alarm", popup=~paste("Alarm Level: ",level,
"<br>Response Time: ", waiting_time_secs, " seconds", "<br>Property Type: ", class)) %>%
addCircleMarkers(data = high, lng = ~lon, lat = ~lat, radius = ~waiting_time_secs/5000, fillOpacity=0.3,
color = ~pal_level(level),  group = "High Alarm", popup=~paste("Alarm Level: ",level,
"<br>Response Time: ", waiting_time_secs, " seconds", "<br>Property Type: ", class)) %>%
setView(lat= 40.712742, lng=-74.013382, zoom = 10) %>%
addLegend(pal = pal_level, values = c("High Alarm","Medium Alarm", "Low Alarm"), opacity = 0.7, title = "Alarm Level",
position = "topleft")%>%
addLayersControl(overlayGroups = c("High Alarm","Medium Alarm","Low Alarm"))
alarm_map
pal_level <- colorFactor(palette = c("#f03b20", "#feb24c", "#ffeda0"),
levels = c("High Alarm","Medium Alarm","Low Alarm"))
alarm_map <- leaflet(options = leafletOptions(minZoom = 8, dragging = TRUE)) %>%
addProviderTiles("CartoDB.DarkMatter",options = providerTileOptions(attribution = ""))%>%
addCircleMarkers(data = low, lng = ~lon, lat = ~lat, radius = ~waiting_time_secs/5000, fillOpacity=0.3,
color = ~pal_level(level),  group = "Low Alarm", popup=~paste("Alarm Level: ",level,
"<br>Response Time: ", waiting_time_secs," seconds", "<br>Property Type: ", class)) %>%
addCircleMarkers(data = medium, lng = ~lon, lat = ~lat, radius = ~waiting_time_secs/5000, fillOpacity=0.3,
color = ~pal_level(level),  group = "Medium Alarm", popup=~paste("Alarm Level: ",level,
"<br>Response Time: ", waiting_time_secs, " seconds", "<br>Property Type: ", class)) %>%
addCircleMarkers(data = high, lng = ~lon, lat = ~lat, radius = ~waiting_time_secs/5000, fillOpacity=0.3,
color = ~pal_level(level),  group = "High Alarm", popup=~paste("Alarm Level: ",level,
"<br>Response Time: ", waiting_time_secs, " seconds", "<br>Property Type: ", class)) %>%
setView(lat= 40.712742, lng=-74.013382, zoom = 10) %>%
addLegend(pal = pal_level, values = c("High Alarm","Medium Alarm", "Low Alarm"), opacity = 0.7, title = "Alarm Level",
position = "topleft")%>%
addLayersControl(overlayGroups = c("High Alarm","Medium Alarm","Low Alarm"))
alarm_map
saveWidget(alarm_map, file="alarm_map.html")
long_response <- subset(response_time, waiting_time_secs > 500)
fireIcons <- icons(
iconUrl = "data/redflame.png",
iconWidth = 15, iconHeight = 15,
iconAnchorX = 7.5, iconAnchorY = 8.5
)
pal_class <- colorFactor(palette = "Tableau10", levels = c("Assembly","Educational","Healthcare, Detention and Correction", "Residential", "Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"))
response_residential <- leaflet(options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "CartoDB") %>%
addCircleMarkers(data = response_time, lng = ~lon, lat = ~lat, radius = ~waiting_time_secs/5000, color = ~pal_class(class),
fillOpacity=0.3, popup = ~paste("Property Type: ", class, "<br>Response Time: ", waiting_time_secs," seconds"))%>%
addMarkers(data= long_response,icon = fireIcons,
popup = ~paste("Property Type: ", class, "<br>Response Time: ", waiting_time_secs," seconds"))%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 )
saveWidget(response_residential, file="response_residential.html")
pal_class <- colorFactor(palette = "Tableau10", levels = c("Assembly","Educational","Healthcare, Detention and Correction", "Residential", "Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"))
response_residential <- leaflet(options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles(provider = "CartoDB") %>%
addCircleMarkers(data = response_time, lng = ~lon, lat = ~lat, radius = ~waiting_time_secs/5000, color = ~pal_class(class),
fillOpacity=0.3, popup = ~paste("Property Type: ", class, "<br>Response Time: ", waiting_time_secs," seconds"))%>%
addMarkers(data= long_response,icon = fireIcons,
popup = ~paste("Property Type: ", class, "<br>Response Time: ", waiting_time_secs," seconds"))%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 )
response_residential
#saveWidget(response_residential, file="response_residential.html")
fireIcons2 <- icons(
iconUrl = "data/flame.png",
iconWidth = 15, iconHeight = 15,
iconAnchorX = 7.5, iconAnchorY = 8.5
)
pal_property <- colorFactor(palette = "Spectral", levels = c("Assembly","Educational","Healthcare, Detention and Correction","Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"))
response_property_map <- leaflet(options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles("Esri.WorldImagery", options = providerTileOptions(attribution = "")) %>%
addCircleMarkers(data = subset(response_time, response_time$class != "Residential"), lng = ~lon, lat = ~lat, radius = ~waiting_time_secs/5000, color = ~pal_property(class), fillOpacity=0.7, popup = ~paste("Property Type: ", class, "<br>Response Time: ", waiting_time_secs," seconds"))%>%
addMarkers(data= subset(long_response, long_response$class != "Residential"),icon = fireIcons2,
popup = ~paste("Property Type: ", class, "<br>Response Time: ", waiting_time_secs," seconds"))%>%
addLegend(pal = pal_property, values = c("Assembly","Educational","Healthcare, Detention and Correction","Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"), opacity = 0.7, title = "Property Affected",position = "topleft")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 )
saveWidget(response_property_map, file="response_property_map.html")
fireIcons2 <- icons(
iconUrl = "data/flame.png",
iconWidth = 15, iconHeight = 15,
iconAnchorX = 7.5, iconAnchorY = 8.5
)
pal_property <- colorFactor(palette = "Spectral", levels = c("Assembly","Educational","Healthcare, Detention and Correction","Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"))
response_property_map <- leaflet(options = leafletOptions(minZoom = 5, dragging = TRUE))%>%
addProviderTiles("Esri.WorldImagery", options = providerTileOptions(attribution = "")) %>%
addCircleMarkers(data = subset(response_time, response_time$class != "Residential"), lng = ~lon, lat = ~lat, radius = ~waiting_time_secs/5000, color = ~pal_property(class), fillOpacity=0.7, popup = ~paste("Property Type: ", class, "<br>Response Time: ", waiting_time_secs," seconds"))%>%
addMarkers(data= subset(long_response, long_response$class != "Residential"),icon = fireIcons2,
popup = ~paste("Property Type: ", class, "<br>Response Time: ", waiting_time_secs," seconds"))%>%
addLegend(pal = pal_property, values = c("Assembly","Educational","Healthcare, Detention and Correction","Mercantile and Business", "Energy Production Plant", "Manufacturing and Processing", "Storage", "Other Property"), opacity = 0.7, title = "Property Affected",position = "topleft")%>%
setView( lat= 40.712742, lng=-74.013382, zoom = 10 )
response_property_map
#saveWidget(response_property_map, file="response_property_map.html")
response_borough<-distance_and_time %>%
select(INCIDENT_DATE_TIME,BOROUGH_DESC, waiting_time_secs)
response_borough['borough'] = list(str_sub(response_borough$BOROUGH_DESC,1,1))
response_borough$borough[response_borough$borough == "1"] <- "Manhattan"
response_borough$borough[response_borough$borough == "2"] <- "Bronx"
response_borough$borough[response_borough$borough == "3"] <- "Staten Island"
response_borough$borough[response_borough$borough == "4"] <- "Brooklyn"
response_borough$borough[response_borough$borough == "5"] <- "Queens"
response_borough$borough <- factor(response_borough$borough, levels= c("Manhattan","Bronx","Staten Island","Brooklyn","Queens"))
response_borough['year'] = list(str_sub(response_borough$INCIDENT_DATE_TIME,7,10))
response_borough$year <- factor(response_borough$year, levels= c("2013","2014","2015","2016","2017","2018"))
head(response_borough)
subset(response_borough, response_borough$borough == "Queens"&response_borough$year =="2013")
average_response_time <-response_borough %>%
filter(!is.na(waiting_time_secs))%>%
group_by(borough, year) %>%
summarise(mean_response_time = round(mean(waiting_time_secs),2))
average_response_time
library(rgdal)
borough <- readOGR("data/borough_boundaries.geojson", verbose=FALSE)
borough@data
shp_response <- borough@data %>%
right_join(average_response_time, by = c("boro_name"= "borough"))
shp_response
borough@data <-shp_response %>%
filter(year =="2013")
summary(borough$mean_response_time)
pal_response <- colorNumeric("PuOr", domain = borough$mean_response_time)
map2013 <-borough %>%
leaflet()%>%
addProviderTiles("CartoDB")%>%
addPolygons(weight = 1, color = ~pal_response(mean_response_time), fillOpacity = 1,
label = ~paste0("Mean Response Time: ", mean_response_time, "seconds"),
highlightOptions = highlightOptions(weight = 5, color = "white", bringToFront = TRUE))%>%
addLegend(pal = pal_response, values = ~ mean_response_time, title = "2013",
position = "topleft", opacity=0.7)
borough@data <-shp_response %>%
filter(year =="2014")
summary(borough$mean_response_time)
pal_response <- colorNumeric("PuOr", domain = borough$mean_response_time)
map2014 <-borough %>%
leaflet()%>%
addProviderTiles("CartoDB")%>%
addPolygons(weight = 1, color = ~pal_response(mean_response_time), fillOpacity = 1,
label = ~paste0("Mean Response Time: ", mean_response_time, "seconds"),
highlightOptions = highlightOptions(weight = 5, color = "white", bringToFront = TRUE))%>%
addLegend(pal = pal_response, values = ~ mean_response_time, title = "2014",
position = "topleft", opacity=0.7)
borough@data <-shp_response %>%
filter(year =="2015")
summary(borough$mean_response_time)
pal_response <- colorNumeric("PuOr", domain = borough$mean_response_time)
map2015 <-borough %>%
leaflet()%>%
addProviderTiles("CartoDB")%>%
addPolygons(weight = 1, color = ~pal_response(mean_response_time), fillOpacity = 1,
label = ~paste0("Mean Response Time: ", mean_response_time, "seconds"),
highlightOptions = highlightOptions(weight = 5, color = "white", bringToFront = TRUE))%>%
addLegend(pal = pal_response, values = ~ mean_response_time, title = "2013",
position = "topleft", opacity=0.7)
borough@data <-shp_response %>%
filter(year =="2016")
summary(borough$mean_response_time)
pal_response <- colorNumeric("PuOr", domain = borough$mean_response_time)
map2016 <-borough %>%
leaflet()%>%
addProviderTiles("CartoDB")%>%
addPolygons(weight = 1, color = ~pal_response(mean_response_time), fillOpacity = 1,
label = ~paste0("Mean Response Time: ", mean_response_time, "seconds"),
highlightOptions = highlightOptions(weight = 5, color = "white", bringToFront = TRUE))%>%
addLegend(pal = pal_response, values = ~ mean_response_time, title = "2016",
position = "topleft", opacity=0.7)
borough@data <-shp_response %>%
filter(year =="2017")
summary(borough$mean_response_time)
pal_response <- colorNumeric("PuOr", domain = borough$mean_response_time)
map2017 <-borough %>%
leaflet()%>%
addProviderTiles("CartoDB")%>%
addPolygons(weight = 1, color = ~pal_response(mean_response_time), fillOpacity = 1,
label = ~paste0("Mean Response Time: ", mean_response_time, "seconds"),
highlightOptions = highlightOptions(weight = 5, color = "white", bringToFront = TRUE))%>%
addLegend(pal = pal_response, values = ~ mean_response_time, title = "2017",
position = "topleft", opacity=0.7)
borough@data <-shp_response %>%
filter(year =="2018")
summary(borough$mean_response_time)
pal_response <- colorNumeric("PuOr", domain = borough$mean_response_time)
map2018 <-borough %>%
leaflet()%>%
addProviderTiles("CartoDB")%>%
addPolygons(weight = 1, color = ~pal_response(mean_response_time), fillOpacity = 1,
label = ~paste0("Mean Response Time: ", mean_response_time, "seconds"),
highlightOptions = highlightOptions(weight = 5, color = "white", bringToFront = TRUE))%>%
addLegend(pal = pal_response, values = ~ mean_response_time, title = "2018",
position = "topleft", opacity=0.7)
library(mapview)
facet_map <- sync(map2013, map2014, map2015, map2016, map2017,map2018, ncol = 3, sync = "all")
facet_map
saveWidget(facet_map, file="facet_map.html")
library(mapview)
facet_map <- sync(map2013, map2014, map2015, map2016, map2017,map2018, ncol = 3, sync = "all")
facet_map
